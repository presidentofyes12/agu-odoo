Home dir: ~/oldhome/home/impromise/Downloads/Telegram Desktop/nostr-w-relay-main/agu-app/src/odoo-nostr-project/odoo_custom_addons/web3_wallet_connect/

=== ./models/__init__.py ===
from . import wallet_config
from . import wallet_connection
from . import res_users
from . import res_config_settings
=== ./models/res_users.py ===
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError
from web3.auto import w3
import logging
from cryptography.fernet import Fernet
import base64

_logger = logging.getLogger(__name__)

class ResUsers(models.Model):
    _inherit = 'res.users'

    # Web3 Fields
    eth_address = fields.Char('ETH Address', copy=False)
    eth_private_key = fields.Char('Private Key', copy=False, groups="web3_wallet_connect.group_wallet_admin")
    current_chain_id = fields.Integer('Current Chain ID')
    
    # Nostr Fields
    nostr_public_key = fields.Char('Nostr Public Key', copy=False)
    nostr_private_key = fields.Char('Nostr Private Key', copy=False, groups="web3_wallet_connect.group_wallet_admin")
    
    # Common Fields
    is_wallet_connected = fields.Boolean('Wallet Connected', default=False)
    last_connection_type = fields.Selection([
        ('web3', 'Web3'),
        ('nostr', 'Nostr')
    ], string='Last Connection Type')
    wallet_connection_ids = fields.One2many('wallet.connection', 'user_id', string='Wallet Connections')

    _sql_constraints = [
        ('eth_address_unique', 'UNIQUE(eth_address)',
         'This Ethereum address is already registered!')
    ]

    @api.model
    def _get_encryption_key(self):
        """Get or create encryption key from system parameters"""
        param = self.env['ir.config_parameter'].sudo()
        key = param.get_param('web3_wallet_connect.encryption_key')
        if not key:
            key = Fernet.generate_key()
            param.set_param('web3_wallet_connect.encryption_key', key.decode())
        return key if isinstance(key, bytes) else key.encode()

    def _encrypt_key(self, key):
        """Encrypt private key"""
        if not key:
            return False
        try:
            f = Fernet(self._get_encryption_key())
            return base64.b64encode(f.encrypt(key.encode())).decode()
        except Exception as e:
            raise UserError(f"Encryption failed: {str(e)}")

    def _decrypt_key(self, encrypted_key):
        """Decrypt private key"""
        if not encrypted_key:
            return False
        try:
            f = Fernet(self._get_encryption_key())
            encrypted = base64.b64decode(encrypted_key.encode())
            return f.decrypt(encrypted).decode()
        except Exception as e:
            raise UserError(f"Decryption failed: {str(e)}")

    @api.constrains('eth_address')
    def _check_eth_address(self):
        """Validate Ethereum address format"""
        for record in self:
            if record.eth_address and not w3.is_address(record.eth_address):
                raise ValidationError("Invalid Ethereum address format")

    def create_web3_wallet(self):
        """Create new Web3 wallet"""
        account = w3.eth.account.create()
        self.write({
            'eth_address': account.address,
            'eth_private_key': self._encrypt_key(account.key.hex()),
            'is_wallet_connected': True,
            'last_connection_type': 'web3'
        })
        return {'address': account.address}

    def create_nostr_wallet(self):
        """Create new Nostr wallet"""
        # Implement Nostr key generation
        pass

    @api.model
    def _update_wallet_balances(self):
        """Cron job to update wallet balances"""
        users = self.search([('is_wallet_connected', '=', True)])
        for user in users:
            for connection in user.wallet_connection_ids:
                connection.update_balance()

    def disconnect_wallet(self):
        """Disconnect active wallet"""
        self.write({
            'is_wallet_connected': False,
            'last_connection_type': False
        })
        for connection in self.wallet_connection_ids:
            connection.disconnect()
=== ./models/wallet_config.py ===
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError
from web3 import Web3
import json
import logging

_logger = logging.getLogger(__name__)

class WalletConfig(models.Model):
    _name = 'wallet.config'
    _description = 'Wallet Configuration'
    _inherit = ['mail.thread']

    name = fields.Char(required=True, tracking=True)
    network_id = fields.Selection([
        # Mainnets
        ('1', 'Ethereum Mainnet'),
        ('369', 'PulseChain'),
        ('137', 'Polygon Mainnet'),
        ('56', 'BSC Mainnet'),
        ('42161', 'Arbitrum One'),
        # Testnets
        ('11155111', 'Sepolia Testnet'),
        ('80001', 'Polygon Mumbai'),
        ('97', 'BSC Testnet'),
        ('421613', 'Arbitrum Goerli'),
    ], required=True, tracking=True)

    rpc_url = fields.Char('RPC URL', required=True, tracking=True)
    network_currency = fields.Char(compute='_compute_network_info', store=True)
    explorer_url = fields.Char(compute='_compute_network_info', store=True)
    active = fields.Boolean(default=True, tracking=True)
    
    # Web3 specific settings
    gas_limit = fields.Integer('Gas Limit', default=8000000)
    gas_price_strategy = fields.Selection([
        ('legacy', 'Legacy'),
        ('eip1559', 'EIP-1559')
    ], default='legacy', required=True)

    _sql_constraints = [
        ('network_unique', 'UNIQUE(network_id, active)',
         'Only one active configuration per network is allowed!')
    ]

    def get_web3_connection(self):
        """Establish Web3 connection using configuration"""
        self.ensure_one()
        try:
            provider = Web3.HTTPProvider(self.rpc_url)
            web3 = Web3(provider)
            if not web3.is_connected():
                raise UserError("Could not connect to blockchain node")
            return web3
        except Exception as e:
            raise UserError(f"Failed to establish Web3 connection: {str(e)}")

    def get_gas_price(self):
        """Get current gas price based on strategy"""
        self.ensure_one()
        web3 = self.get_web3_connection()
        
        if self.gas_price_strategy == 'eip1559':
            block = web3.eth.get_block('latest')
            return {
                'maxFeePerGas': block['baseFeePerGas'] * 2,
                'maxPriorityFeePerGas': web3.eth.max_priority_fee
            }
        return {'gasPrice': web3.eth.gas_price}

    @api.model
    def _check_network_status(self):
        """Cron job to check network status"""
        configs = self.search([('active', '=', True)])
        for config in configs:
            try:
                web3 = config.get_web3_connection()
                web3.eth.get_block_number()
            except Exception as e:
                _logger.error(f"Network check failed for {config.name}: {str(e)}")

    @api.depends('network_id')
    def _compute_network_info(self):
        """Compute network currency and explorer URL"""
        currencies = {
            '1': 'ETH', '369': 'PLS', '137': 'MATIC',
            '56': 'BNB', '42161': 'ETH'
        }
        explorers = {
            '1': 'https://etherscan.io',
            '369': 'https://otter.pulsechain.com',
            '137': 'https://polygonscan.com',
            '56': 'https://bscscan.com',
            '42161': 'https://arbiscan.io'
        }
        
        for record in self:
            record.network_currency = currencies.get(record.network_id, 'ETH')
            record.explorer_url = explorers.get(record.network_id, '')

    def test_connection(self):
        """Test blockchain node connection"""
        self.ensure_one()
        try:
            web3 = self.get_web3_connection()
            block_number = web3.eth.block_number
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Connection Test',
                    'message': f'Successfully connected. Latest block: {block_number}',
                    'type': 'success',
                }
            }
        except Exception as e:
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Connection Test',
                    'message': f'Connection failed: {str(e)}',
                    'type': 'danger',
                }
            }

    @api.onchange('network_id')
    def _onchange_network_id(self):
        """Update RPC URL when network changes"""
        if self.network_id:
            rpc_urls = {
                '1': 'https://mainnet.infura.io/v3/YOUR-PROJECT-ID',
                '369': 'https://rpc.pulsechain.com',
                '137': 'https://polygon-rpc.com',
                '56': 'https://bsc-dataseed.binance.org',
                '42161': 'https://arb1.arbitrum.io/rpc'
            }
            self.rpc_url = rpc_urls.get(self.network_id, '')
=== ./models/wallet_connection.py ===
from odoo import models, fields, api
from odoo.exceptions import UserError
import logging

_logger = logging.getLogger(__name__)

class WalletConnection(models.Model):
    _name = 'wallet.connection'
    _description = 'Wallet Connection'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _rec_name = 'name'

    name = fields.Char(compute='_compute_name', store=True)
    user_id = fields.Many2one('res.users', required=True, ondelete='cascade')
    connection_type = fields.Selection([
        ('web3', 'Web3 Wallet'),
        ('nostr', 'Nostr')
    ], required=True)
    
    # Web3 specific fields
    eth_address = fields.Char('ETH Address')
    chain_id = fields.Integer('Chain ID')
    balance = fields.Float('Balance', digits=(18, 8))
    last_block_check = fields.Integer('Last Block Check')
    
    # Nostr specific fields
    nostr_public_key = fields.Char('Nostr Public Key')
    connected_relays = fields.Text('Connected Relays')
    
    state = fields.Selection([
        ('connected', 'Connected'),
        ('disconnected', 'Disconnected'),
        ('error', 'Error')
    ], default='disconnected', tracking=True)
    
    last_connection = fields.Datetime('Last Connection', tracking=True)
    last_error = fields.Text('Last Error')

    _sql_constraints = [
        ('user_type_unique', 'UNIQUE(user_id, connection_type)',
         'A user can only have one connection per type!')
    ]

    @api.depends('user_id', 'connection_type')
    def _compute_name(self):
        for record in self:
            record.name = f"{record.user_id.name}'s {record.connection_type} connection"

    def action_connect(self):
        """Initiate wallet connection"""
        self.ensure_one()
        if self.connection_type == 'web3':
            return {
                'type': 'ir.actions.client',
                'tag': 'web3_wallet_connect.connect',  # Changed this tag
                'name': 'Connect Wallet',
                'target': 'new',
            }
        elif self.connection_type == 'nostr':
            return self._connect_nostr()

    def _connect_web3(self):
        """Handle Web3 wallet connection"""
        return {
            'type': 'ir.actions.client',
            'tag': 'wallet_connector',
            'params': {
                'connection_id': self.id,
                'connection_type': 'web3'
            }
        }

    def _connect_nostr(self):
        """Handle Nostr connection"""
        return {
            'type': 'ir.actions.client',
            'tag': 'wallet_connector',
            'params': {
                'connection_id': self.id,
                'connection_type': 'nostr'
            }
        }

    def _handle_connection_error(self, error_message):
        """Handle connection errors"""
        self.write({
            'state': 'error',
            'last_error': error_message
        })
        raise UserError(f"Connection failed: {error_message}")

    def update_balance(self):
        """Update wallet balance"""
        for record in self:
            if record.connection_type == 'web3' and record.eth_address:
                try:
                    web3 = self.env['wallet.config'].get_web3_connection()
                    balance_wei = web3.eth.get_balance(record.eth_address)
                    record.balance = web3.from_wei(balance_wei, 'ether')
                    record.last_block_check = web3.eth.block_number
                except Exception as e:
                    _logger.error(f"Failed to update balance: {str(e)}")

    def disconnect(self):
        """Disconnect wallet"""
        self.write({
            'state': 'disconnected',
            'last_error': False
        })
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'message': 'Wallet disconnected successfully',
                'type': 'success'
            }
        }
=== ./models/res_config_settings.py ===
from odoo import models, fields, api

class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'

    default_gas_limit = fields.Integer(
        'Default Gas Limit',
        default=8000000,
        config_parameter='web3_wallet_connect.default_gas_limit'
    )

    balance_update_interval = fields.Integer(
        'Balance Update Interval (minutes)',
        default=5,
        config_parameter='web3_wallet_connect.balance_update_interval'
    )

    network_check_interval = fields.Integer(
        'Network Check Interval (minutes)',
        default=10,
        config_parameter='web3_wallet_connect.network_check_interval'
    )

    auto_disconnect_timeout = fields.Integer(
        'Auto Disconnect Timeout (minutes)',
        default=30,
        config_parameter='web3_wallet_connect.auto_disconnect_timeout'
    )

    default_gas_price_strategy = fields.Selection([
        ('legacy', 'Legacy'),
        ('eip1559', 'EIP-1559')
    ], default='legacy',
    config_parameter='web3_wallet_connect.default_gas_price_strategy')

    @api.model
    def get_values(self):
        res = super(ResConfigSettings, self).get_values()
        params = self.env['ir.config_parameter'].sudo()
        
        res.update(
            balance_update_interval=int(params.get_param('web3_wallet_connect.balance_update_interval', 5)),
            network_check_interval=int(params.get_param('web3_wallet_connect.network_check_interval', 10)),
            auto_disconnect_timeout=int(params.get_param('web3_wallet_connect.auto_disconnect_timeout', 30)),
            default_gas_price_strategy=params.get_param('web3_wallet_connect.default_gas_price_strategy', 'legacy')
        )
        return res

    def set_values(self):
        super(ResConfigSettings, self).set_values()
        params = self.env['ir.config_parameter'].sudo()
        
        params.set_param('web3_wallet_connect.balance_update_interval', self.balance_update_interval)
        params.set_param('web3_wallet_connect.network_check_interval', self.network_check_interval)
        params.set_param('web3_wallet_connect.auto_disconnect_timeout', self.auto_disconnect_timeout)
        params.set_param('web3_wallet_connect.default_gas_price_strategy', self.default_gas_price_strategy)
=== ./__init__.py ===
from . import models
from . import controllers
from . import wizards
=== ./wizards/__init__.py ===
from . import wallet_import_wizard
=== ./wizards/wallet_import_wizard.py ===
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError
from eth_account import Account
import json
import logging

_logger = logging.getLogger(__name__)

class WalletImportWizard(models.TransientModel):
    _name = 'wallet.import.wizard'
    _description = 'Wallet Import Wizard'

    user_id = fields.Many2one('res.users', required=True, default=lambda self: self.env.user)
    import_type = fields.Selection([
        ('private_key', 'Private Key'),
        ('json_file', 'Keystore JSON'),
        ('nostr_key', 'Nostr Key')
    ], required=True, default='private_key')
    
    private_key = fields.Char('Private Key')
    keystore_file = fields.Binary('Keystore File')
    keystore_password = fields.Char('Keystore Password')
    nostr_private_key = fields.Char('Nostr Private Key')
    
    @api.onchange('import_type')
    def _onchange_import_type(self):
        """Clear sensitive fields when changing import type"""
        self.private_key = False
        self.keystore_file = False
        self.keystore_password = False
        self.nostr_private_key = False

    def _validate_eth_private_key(self, private_key):
        """Validate Ethereum private key"""
        try:
            if private_key.startswith('0x'):
                private_key = private_key[2:]
            account = Account.from_key(private_key)
            return account
        except Exception as e:
            raise ValidationError(f"Invalid private key: {str(e)}")

    def _validate_keystore(self, keystore_file, password):
        """Validate keystore file and password"""
        try:
            keystore_json = json.loads(keystore_file.decode())
            private_key = Account.decrypt(keystore_json, password)
            account = Account.from_key(private_key)
            return account
        except Exception as e:
            raise ValidationError(f"Invalid keystore or password: {str(e)}")

    def _validate_nostr_key(self, private_key):
        """Validate Nostr private key"""
        # Add Nostr-specific validation logic here
        return True

    def action_import(self):
        """Import wallet based on selected method"""
        self.ensure_one()
        
        if not self.user_id:
            raise UserError("No user specified for wallet import")

        try:
            if self.import_type == 'private_key':
                if not self.private_key:
                    raise ValidationError("Private key is required")
                account = self._validate_eth_private_key(self.private_key)
                self.user_id.write({
                    'eth_address': account.address,
                    'eth_private_key': self.private_key,
                    'is_wallet_connected': True
                })
                
            elif self.import_type == 'json_file':
                if not self.keystore_file or not self.keystore_password:
                    raise ValidationError("Keystore file and password are required")
                account = self._validate_keystore(self.keystore_file, self.keystore_password)
                self.user_id.write({
                    'eth_address': account.address,
                    'eth_private_key': account.key.hex(),
                    'is_wallet_connected': True
                })
                
            elif self.import_type == 'nostr_key':
                if not self.nostr_private_key:
                    raise ValidationError("Nostr private key is required")
                self._validate_nostr_key(self.nostr_private_key)
                self.user_id.write({
                    'nostr_private_key': self.nostr_private_key,
                    'is_wallet_connected': True
                })

            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Success',
                    'message': 'Wallet imported successfully',
                    'type': 'success',
                    'sticky': False,
                }
            }
            
        except Exception as e:
            raise UserError(f"Failed to import wallet: {str(e)}")
=== ./__manifest__.py ===
{
    'name': 'Web3 Wallet Connect',
    'version': '1.0',
    'category': 'Blockchain',
    'summary': 'Multi-protocol wallet connection management',
    'description': """
        Manage Web3 and Nostr wallet connections within Odoo
        - Support for multiple wallet providers (MetaMask, WalletConnect, etc.)
        - Nostr protocol support
        - Network management
        - Transaction handling
        - Secure key management
    """,
    'author': 'Your Company',
    'website': 'https://yourcompany.com',
    'depends': ['base', 'web', 'mail'],
    'data': [
        'security/wallet_security.xml',
        'security/ir.model.access.csv',
        'views/menu_views.xml',  # Add this first
        'views/actions.xml',  # Add this first
        'views/wallet_config_views.xml',
        'views/wallet_connection_views.xml',
        'views/res_users_views.xml',
        'views/res_config_settings_views.xml',
        'data/wallet_sequence.xml',
        'data/scheduled_tasks.xml',
    ],
    'assets': {
        'web.assets_backend': [
            # CSS
            '/web3_wallet_connect/static/src/css/**/*',
            # XML Templates
            '/web3_wallet_connect/static/src/xml/**/*',
            # JavaScript
            '/web3_wallet_connect/static/src/js/**/*',
        ],
    },
    'external_dependencies': {
        'python': ['web3', 'eth_account', 'eth_keys', 'cryptography'],
    },
    'installable': True,
    'application': True,
    'auto_install': False,
    'license': 'LGPL-3',
}
=== ./static/src/xml/wallet_connector_templates.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="web3_wallet_connect.WalletConnector" owl="1">
        <div class="o_wallet_connector p-4">
            <t t-if="!state.isConnected">
                <div class="text-center">
                    <button class="btn btn-primary" t-on-click="handleConnect">
                        Connect MetaMask
                    </button>
                </div>
            </t>
            
            <t t-if="state.isConnected">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Connected Wallet</h5>
                        <button class="btn btn-secondary btn-sm" t-on-click="handleDisconnect">
                            Disconnect
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Account</label>
                            <div class="form-control font-monospace">
                                <t t-esc="state.account"/>
                            </div>
                        </div>
                        
                        <t t-if="state.balance !== null">
                            <div class="mb-3">
                                <label class="form-label">Balance</label>
                                <div class="form-control">
                                    <t t-esc="state.balance.toFixed(4)"/> ETH
                                </div>
                            </div>
                        </t>
                        
                        <t t-if="state.chainId">
                            <div class="mb-3">
                                <label class="form-label">Network ID</label>
                                <div class="form-control">
                                    <t t-esc="parseInt(state.chainId, 16)"/>
                                </div>
                            </div>
                        </t>
                    </div>
                </div>
            </t>
        </div>
    </t>
</templates>
=== ./static/src/css/wallet_connector.css ===
.o_wallet_connector {
    padding: 20px;
    max-width: 600px;
    margin: 0 auto;
}

.o_wallet_connector .wallet-info {
    margin-top: 20px;
}

.o_wallet_connector .info-row {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    border-bottom: 1px solid #eee;
}

.o_wallet_connector .info-row .label {
    font-weight: bold;
    color: #666;
}

.o_wallet_connector .info-row .value {
    word-break: break-all;
}
=== ./static/src/js/wallet_connector.js ===
/** @odoo-module **/

import { registry } from '@web/core/registry';
import { useService } from "@web/core/utils/hooks";
import { Component, useState, onMounted, onWillUnmount } from "@odoo/owl";

class WalletConnectorComponent extends Component {
    setup() {
        this.state = useState({
            isConnected: false,
            account: null,
            chainId: null,
            balance: null,
            provider: null,
            error: null
        });
        
        this.rpc = useService("rpc");
        this.notification = useService("notification");
        this.action = useService("action");
        
        onMounted(() => {
            this.initializeProvider();
        });
    }

    async initializeProvider() {
        if (typeof window.ethereum !== 'undefined') {
            this.state.provider = window.ethereum;
            this.setupEventListeners();
        }
    }

    setupEventListeners() {
        if (!this.state.provider) return;

        this.state.provider.on('accountsChanged', (accounts) => {
            if (accounts.length === 0) {
                this.handleDisconnect();
            } else {
                this.state.account = accounts[0];
                this.updateBalance();
            }
        });

        this.state.provider.on('chainChanged', async (chainId) => {
            this.state.chainId = chainId;
            await this.updateBalance();
        });
    }

    async handleConnect() {
        try {
            if (!this.state.provider) {
                throw new Error('MetaMask not installed');
            }

            const accounts = await this.state.provider.request({
                method: 'eth_requestAccounts'
            });

            this.state.account = accounts[0];
            this.state.chainId = await this.state.provider.request({
                method: 'eth_chainId'
            });
            
            await this.updateBalance();
            await this.updateServerState();

            this.state.isConnected = true;

            this.notification.add({
                title: 'Success',
                message: 'Wallet connected successfully',
                type: 'success'
            });

            // Reload the view
            await this.action.doAction({
                type: 'ir.actions.client',
                tag: 'reload',
            });

        } catch (error) {
            this.notification.add({
                title: 'Error',
                message: error.message,
                type: 'danger'
            });
        }
    }

    async updateBalance() {
        if (this.state.provider && this.state.account) {
            try {
                const balance = await this.state.provider.request({
                    method: 'eth_getBalance',
                    params: [this.state.account, 'latest']
                });
                this.state.balance = parseInt(balance, 16) / 1e18;
            } catch (error) {
                console.error('Error fetching balance:', error);
            }
        }
    }

    async updateServerState() {
        try {
            await this.rpc.call('/web3_wallet_connect/update_connection', {
                account: this.state.account,
                chain_id: this.state.chainId,
                provider_type: 'web3'
            });
        } catch (error) {
            console.error('Error updating server state:', error);
        }
    }

    async handleDisconnect() {
        this.state.isConnected = false;
        this.state.account = null;
        this.state.chainId = null;
        this.state.balance = null;
        await this.updateServerState();
        
        this.notification.add({
            title: 'Success',
            message: 'Wallet disconnected',
            type: 'success'
        });
    }
}

WalletConnectorComponent.template = 'web3_wallet_connect.WalletConnector';

/*
WalletConnectorComponent.components = {};

// Register the client action
const walletConnectorAction = {
    type: 'ir.actions.client',
    tag: 'wallet_connector',
    target: 'current',
    Component: WalletConnectorComponent,
};
*/

// Properly register the component
registry.category("actions").add("web3_wallet_connect.connect", {
    component: WalletConnectorComponent,
    target: 'new',
});

export default WalletConnectorComponent;=== ./allfiles.txt ===
=== ./security/wallet_security.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">
        <!-- Security Groups -->
        <record id="module_wallet_connect_category" model="ir.module.category">
            <field name="name">Wallet Management</field>
            <field name="description">Manage wallet connections</field>
            <field name="sequence">20</field>
        </record>

        <record id="group_wallet_user" model="res.groups">
            <field name="name">User</field>
            <field name="category_id" ref="module_wallet_connect_category"/>
            <field name="comment">Basic wallet connection access</field>
        </record>

        <record id="group_wallet_admin" model="res.groups">
            <field name="name">Administrator</field>
            <field name="category_id" ref="module_wallet_connect_category"/>
            <field name="implied_ids" eval="[(4, ref('group_wallet_user'))]"/>
            <field name="comment">Full access to wallet configurations</field>
            <field name="users" eval="[(4, ref('base.user_admin'))]"/>
        </record>
    </data>

    <!-- Record Rules -->
    <data noupdate="1">
        <record id="wallet_config_rule_user" model="ir.rule">
            <field name="name">Users can only see active wallet configurations</field>
            <field name="model_id" ref="model_wallet_config"/>
            <field name="domain_force">[('active', '=', True)]</field>
            <field name="groups" eval="[(4, ref('group_wallet_user'))]"/>
        </record>

        <record id="rule_user_private_key_access" model="ir.rule">
            <field name="name">Users can only access their own wallet data</field>
            <field name="model_id" ref="base.model_res_users"/>
            <field name="domain_force">[('id', '=', user.id)]</field>
            <field name="groups" eval="[(4, ref('base.group_user'))]"/>
        </record>
    </data>
</odoo>
=== ./security/ir.model.access.csv ===
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_wallet_config_user,wallet.config.user,model_wallet_config,web3_wallet_connect.group_wallet_user,1,0,0,0
access_wallet_config_admin,wallet.config.admin,model_wallet_config,web3_wallet_connect.group_wallet_admin,1,1,1,1
access_wallet_connection_user,wallet.connection.user,model_wallet_connection,web3_wallet_connect.group_wallet_user,1,1,1,0
access_wallet_connection_admin,wallet.connection.admin,model_wallet_connection,web3_wallet_connect.group_wallet_admin,1,1,1,1
access_wallet_import_wizard_user,wallet.import.wizard.user,model_wallet_import_wizard,web3_wallet_connect.group_wallet_user,1,1,1,0
access_wallet_settings_admin,wallet.settings.admin,model_res_config_settings,web3_wallet_connect.group_wallet_admin,1,1,1,1
=== ./data/scheduled_tasks.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <!-- Update Wallet Balances -->
        <record id="ir_cron_update_wallet_balances" model="ir.cron">
            <field name="name">Update Wallet Balances</field>
            <field name="model_id" ref="model_res_users"/>
            <field name="state">code</field>
            <field name="code">model._update_wallet_balances()</field>
            <field name="interval_number">5</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="doall" eval="False"/>
            <field name="active" eval="True"/>
        </record>

        <!-- Check Network Status -->
        <record id="ir_cron_check_network_status" model="ir.cron">
            <field name="name">Check Network Status</field>
            <field name="model_id" ref="model_wallet_config"/>
            <field name="state">code</field>
            <field name="code">model._check_network_status()</field>
            <field name="interval_number">10</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="doall" eval="False"/>
            <field name="active" eval="True"/>
        </record>
    </data>
</odoo>
=== ./data/wallet_sequence.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <!-- Sequence for Wallet Configurations -->
        <record id="seq_wallet_config" model="ir.sequence">
            <field name="name">Wallet Configuration Sequence</field>
            <field name="code">wallet.config</field>
            <field name="prefix">WALLET/</field>
            <field name="padding">5</field>
            <field name="company_id" eval="False"/>
        </record>

        <!-- Default Network Configurations -->
        <record id="default_eth_mainnet_config" model="wallet.config">
            <field name="name">Ethereum Mainnet</field>
            <field name="network_id">1</field>
            <field name="rpc_url">https://eth-mainnet.alchemyapi.io/v2/your-api-key</field>
            <field name="network_currency">ETH</field>
            <field name="explorer_url">https://etherscan.io</field>
            <field name="active" eval="True"/>
        </record>

        <record id="default_pulsechain_config" model="wallet.config">
            <field name="name">PulseChain</field>
            <field name="network_id">369</field>
            <field name="rpc_url">https://rpc.pulsechain.com</field>
            <field name="network_currency">PLS</field>
            <field name="explorer_url">https://otter.pulsechain.com</field>
            <field name="active" eval="True"/>
        </record>
    </data>
</odoo>
=== ./views/res_users_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Extend User Form -->
    <record id="view_users_form_wallet" model="ir.ui.view">
        <field name="name">res.users.form.wallet</field>
        <field name="model">res.users</field>
        <field name="inherit_id" ref="base.view_users_form"/>
        <field name="arch" type="xml">
            <notebook position="inside">
                <page string="Wallet Management" name="wallet_management">
                    <group>
                        <group string="Web3 Wallet">
                            <field name="eth_address"/>
                            <field name="current_chain_id"/>
                            <field name="eth_private_key" password="True" 
                                   groups="web3_wallet_connect.group_wallet_admin"/>
                            <button name="create_web3_wallet" 
                                    string="Create New Wallet" 
                                    type="object" 
                                    class="btn-primary"
                                    attrs="{'invisible': [('eth_address', '!=', False)]}"/>
                        </group>
                        <group string="Nostr Wallet">
                            <field name="nostr_public_key"/>
                            <field name="nostr_private_key" password="True"
                                   groups="web3_wallet_connect.group_wallet_admin"/>
                            <button name="create_nostr_wallet" 
                                    string="Create Nostr Keys" 
                                    type="object" 
                                    class="btn-primary"
                                    attrs="{'invisible': [('nostr_public_key', '!=', False)]}"/>
                        </group>
                    </group>
                    <group string="Connection Status">
                        <field name="is_wallet_connected"/>
                        <field name="last_connection_type"/>
                    </group>
                    <field name="wallet_connection_ids">
                        <tree>
                            <field name="connection_type"/>
                            <field name="state"/>
                            <field name="last_connection"/>
                        </tree>
                    </field>
                    <div class="alert alert-info" role="alert" 
                         groups="web3_wallet_connect.group_wallet_admin">
                        <p><strong>Security Notice:</strong> Private keys are encrypted before storage and can only be accessed by administrators.</p>
                    </div>
                </page>
            </notebook>
        </field>
    </record>

    <!-- Extend User Preferences -->
    <record id="res_users_view_form_preferences_wallet" model="ir.ui.view">
        <field name="name">res.users.preferences.form.wallet</field>
        <field name="model">res.users</field>
        <field name="inherit_id" ref="base.view_users_form_simple_modif"/>
        <field name="arch" type="xml">
            <xpath expr="//group" position="after">
                <group string="Wallet Information" name="wallet_info">
                    <field name="eth_address" readonly="1"/>
                    <field name="nostr_public_key" readonly="1"/>
                    <field name="is_wallet_connected" readonly="1"/>
                    <field name="last_connection_type" readonly="1"/>
                    <button name="disconnect_wallet" 
                            string="Disconnect Wallet" 
                            type="object" 
                            class="btn-secondary"
                            attrs="{'invisible': [('is_wallet_connected', '=', False)]}"/>
                </group>
            </xpath>
        </field>
    </record>
</odoo>
=== ./views/res_config_settings_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="res_config_settings_view_form_wallet" model="ir.ui.view">
        <field name="name">res.config.settings.view.form.inherit.wallet</field>
        <field name="model">res.config.settings</field>
        <field name="inherit_id" ref="base.res_config_settings_view_form"/>
        <field name="arch" type="xml">
            <xpath expr="//div[hasclass('settings')]" position="inside">
                <div class="app_settings_block" data-string="Wallet Connect" string="Wallet Connect" data-key="web3_wallet_connect">
                    <h2>Wallet Settings</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Default Gas Limit</span>
                                <div class="text-muted">
                                    Set default gas limit for transactions
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="default_gas_limit" class="o_light_label"/>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Default Gas Price Strategy</span>
                                <div class="text-muted">
                                    Choose default gas price calculation method
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="default_gas_price_strategy" class="o_light_label"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <h2>Update Intervals</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Balance Update Interval</span>
                                <div class="text-muted">
                                    How often to update wallet balances (minutes)
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="balance_update_interval" class="o_light_label"/>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Network Check Interval</span>
                                <div class="text-muted">
                                    How often to check network status (minutes)
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="network_check_interval" class="o_light_label"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <h2>Security Settings</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Auto Disconnect Timeout</span>
                                <div class="text-muted">
                                    Automatically disconnect inactive wallets after (minutes)
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="auto_disconnect_timeout" class="o_light_label"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </xpath>
        </field>
    </record>
</odoo>
=== ./views/menu_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <menuitem 
        id="menu_wallet_root"
        name="Wallet"
        sequence="50"/>

    <menuitem 
        id="menu_wallet_config" 
        name="Network Configurations"
        parent="menu_wallet_root"
        action="action_wallet_config"
        sequence="10"/>

    <menuitem id="menu_wallet_connection"
              name="Connections"
              parent="menu_wallet_root"
              action="action_wallet_connection"
              sequence="20"/>
</odoo>
=== ./views/wallet_connection_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_wallet_connection_tree" model="ir.ui.view">
        <field name="name">wallet.connection.tree</field>
        <field name="model">wallet.connection</field>
        <field name="arch" type="xml">
            <tree decoration-success="state=='connected'"
                  decoration-danger="state=='error'"
                  decoration-muted="state=='disconnected'">
                <field name="name"/>
                <field name="user_id"/>
                <field name="connection_type"/>
                <field name="eth_address"/>
                <field name="nostr_public_key"/>
                <field name="state"/>
                <field name="last_connection"/>
            </tree>
        </field>
    </record>

    <record id="view_wallet_connection_form" model="ir.ui.view">
        <field name="name">wallet.connection.form</field>
        <field name="model">wallet.connection</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="action_connect" type="object" 
                            string="Connect" class="btn-primary"
                            attrs="{'invisible': [('state', '=', 'connected')]}"/>
                    <button name="disconnect" type="object" 
                            string="Disconnect" class="btn-secondary"
                            attrs="{'invisible': [('state', '!=', 'connected')]}"/>
                    <field name="state" widget="statusbar"
                           statusbar_visible="connected,disconnected,error"/>
                </header>
                <sheet>
                    <div class="oe_title">
                        <h1>
                            <field name="name"/>
                        </h1>
                    </div>
                    <group>
                        <group>
                            <field name="user_id"/>
                            <field name="connection_type"/>
                            <field name="last_connection"/>
                        </group>
                        <group attrs="{'invisible': [('connection_type', '!=', 'web3')]}">
                            <field name="eth_address"/>
                            <field name="chain_id"/>
                            <field name="balance"/>
                            <field name="last_block_check"/>
                        </group>
                        <group attrs="{'invisible': [('connection_type', '!=', 'nostr')]}">
                            <field name="nostr_public_key"/>
                            <field name="connected_relays"/>
                        </group>
                    </group>
                    <notebook>
                        <page string="Error Log" 
                              attrs="{'invisible': [('last_error', '=', False)]}">
                            <field name="last_error"/>
                        </page>
                    </notebook>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids"/>
                    <field name="message_ids"/>
                </div>
            </form>
        </field>
    </record>

    <record id="action_wallet_connection" model="ir.actions.act_window">
        <field name="name">Wallet Connections</field>
        <field name="res_model">wallet.connection</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                No wallet connections yet!
            </p>
            <p>
                Connect your Web3 or Nostr wallet to get started.
            </p>
        </field>
    </record>

    <menuitem id="menu_wallet_connection"
              name="Connections"
              parent="menu_wallet_root"
              action="action_wallet_connection"
              sequence="20"/>
</odoo>
=== ./views/actions.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Define the action first -->
    <record id="action_wallet_config" model="ir.actions.act_window">
        <field name="name">Network Configurations</field>
        <field name="res_model">dao.config</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first network configuration
            </p>
            <p>
                Configure blockchain network settings here.
            </p>
        </field>
    </record>

    <!-- Then define the menu item -->
    <menuitem 
        id="menu_wallet_root"
        name="Wallet"
        sequence="50"/>

    <menuitem 
        id="menu_wallet_config" 
        name="Network Configurations"
        parent="menu_wallet_root"
        action="action_wallet_config"
        sequence="10"/>
</odoo>
=== ./views/wallet_config_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_wallet_config_tree" model="ir.ui.view">
        <field name="name">wallet.config.tree</field>
        <field name="model">wallet.config</field>
        <field name="arch" type="xml">
            <tree>
                <field name="name"/>
                <field name="network_id"/>
                <field name="network_currency"/>
                <field name="active"/>
                <field name="gas_price_strategy"/>
            </tree>
        </field>
    </record>

    <record id="view_wallet_config_form" model="ir.ui.view">
        <field name="name">wallet.config.form</field>
        <field name="model">wallet.config</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="test_connection" type="object" 
                            string="Test Connection" class="btn-primary"/>
                </header>
                <sheet>
                    <div class="oe_button_box" name="button_box">
                        <button name="toggle_active" type="object" 
                                class="oe_stat_button" icon="fa-archive">
                            <field name="active" widget="boolean_button"
                                   options='{"terminology": "archive"}'/>
                        </button>
                    </div>
                    <div class="oe_title">
                        <h1>
                            <field name="name" placeholder="e.g., Ethereum Mainnet"/>
                        </h1>
                    </div>
                    <group>
                        <group>
                            <field name="network_id"/>
                            <field name="rpc_url" placeholder="Enter RPC URL"/>
                            <field name="network_currency"/>
                            <field name="explorer_url" widget="url"/>
                        </group>
                        <group>
                            <field name="gas_price_strategy"/>
                            <field name="gas_limit"/>
                        </group>
                    </group>
                    <notebook>
                        <page string="Advanced Settings" name="advanced_settings">
                            <group>
                                <field name="active"/>
                            </group>
                            <div class="alert alert-info" role="alert">
                                <p><strong>Note:</strong> Only one configuration per network can be active at a time.</p>
                            </div>
                        </page>
                    </notebook>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids"/>
                    <field name="message_ids"/>
                </div>
            </form>
        </field>
    </record>

    <record id="view_wallet_config_search" model="ir.ui.view">
        <field name="name">wallet.config.search</field>
        <field name="model">wallet.config</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="network_id"/>
                <filter string="Active" name="active" domain="[('active', '=', True)]"/>
                <filter string="Archived" name="inactive" domain="[('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Network" name="group_by_network" 
                            context="{'group_by': 'network_id'}"/>
                </group>
            </search>
        </field>
    </record>

    <record id="action_wallet_config" model="ir.actions.act_window">
        <field name="name">Network Configurations</field>
        <field name="res_model">wallet.config</field>
        <field name="view_mode">tree,form</field>
        <field name="search_view_id" ref="view_wallet_config_search"/>
        <field name="context">{'search_default_active': 1}</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first network configuration!
            </p>
            <p>
                Define blockchain network configurations for wallet connections.
            </p>
        </field>
    </record>

    <!-- Menu Items -->
    <menuitem id="menu_wallet_root" 
              name="Wallet Connect"
              web_icon="web3_wallet_connect,static/description/icon.png"
              sequence="50"/>

    <menuitem id="menu_wallet_config"
              name="Network Configurations"
              parent="menu_wallet_root"
              action="action_wallet_config"
              sequence="10"/>
</odoo>
=== ./controllers/__init__.py ===
from . import main
=== ./controllers/main.py ===
from odoo import http
from odoo.http import request
from odoo.exceptions import AccessError, UserError
import json
import logging

_logger = logging.getLogger(__name__)

class WalletController(http.Controller):
    @http.route('/web3_wallet_connect/update_connection', type='json', auth='user')
    def update_connection(self, account, chain_id=None, provider_type='web3'):
        """Update user's wallet connection status"""
        try:
            user = request.env.user
            vals = {
                'is_wallet_connected': bool(account),
                'last_connection_type': provider_type,
            }
            
            if provider_type == 'web3':
                vals.update({
                    'eth_address': account,
                    'current_chain_id': chain_id
                })
            elif provider_type == 'nostr':
                vals.update({
                    'nostr_public_key': account
                })
                
            user.write(vals)
            return {'success': True}
        except Exception as e:
            _logger.error("Wallet connection update failed: %s", str(e))
            return {'success': False, 'error': str(e)}

    @http.route('/web3_wallet_connect/get_network_config', type='json', auth='user')
    def get_network_config(self, chain_id):
        """Get network configuration for specified chain ID"""
        try:
            config = request.env['wallet.config'].sudo().search([
                ('network_id', '=', str(chain_id)),
                ('active', '=', True)
            ], limit=1)
            
            if not config:
                return {'success': False, 'error': 'Network not configured'}
                
            return {
                'success': True,
                'data': {
                    'name': config.name,
                    'rpc_url': config.rpc_url,
                    'currency': config.network_currency,
                    'explorer_url': config.explorer_url
                }
            }
        except Exception as e:
            return {'success': False, 'error': str(e)}

    @http.route('/web3_wallet_connect/import_wallet', type='json', auth='user')
    def import_wallet(self, wallet_data):
        """Handle wallet import request"""
        try:
            wizard = request.env['wallet.import.wizard'].create({
                'user_id': request.env.user.id,
                **wallet_data
            })
            result = wizard.action_import()
            return {'success': True, 'data': result}
        except Exception as e:
            _logger.error("Wallet import failed: %s", str(e))
            return {'success': False, 'error': str(e)}
